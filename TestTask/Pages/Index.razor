@page "/"
@using TestTask.Services
@using Microsoft.EntityFrameworkCore
@using TestTask.Data
@using TestTask.Model
@inject IBlobStorageService Blob
@inject IDbContextFactory<BlobContext> DbFactory
@inject ILogger<BlobStorageService> Logger

<PageTitle>Home</PageTitle>

<div>
    <div class="text-center">
        <h1>Hello!</h1>
        <h3>Please, submit a form:</h3>
    </div>
    <div class="col-md-6 mx-auto">
        <EditForm Model="@Model" class="was-validated">
            <div class="row-cols-1">
                <label>
                    Upload .docx file:
                    <InputFile class="form-control" disabled="@fileLoading" OnChange="@OnInputFileChange" single accept=".doc,.docx" required />
                </label>
                @if (fileLoading)
                {
                    <span>Loading...</span>
                }
            </div>
            <div class="form-group">
                <label for="emailInput">Input email:</label>
                <InputText @bind-Value="Model.Email" type="email" class="form-control" id="emailInput" required />
            </div>
            <button type="submit" class="btn btn-primary" disabled="@fileLoading" @onclick="OnSubmit">Send</button>
        </EditForm>
        <p>@warninngMessage</p>
    </div>
</div>

@code {
    private string warninngMessage;
    private bool fileLoading;
    private string blobUrl;
    private FormModel Model;
    IBrowserFile file;
    
    protected override void OnInitialized() =>
        Model ??= new() { Email = String.Empty };
    
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        Logger.LogInformation($"File {file.Name} added to the form.");
        warninngMessage = String.Empty;
        this.StateHasChanged();
    }
    
    private async void OnSubmit()
    {
        Logger.LogInformation($"Form submitted with {file.Name} and {Model.Email}.");
        fileLoading = true;
        
        try
        {
            blobUrl = await Blob.UploadFileToBlobAsync(file.Name, file.ContentType, file.OpenReadStream(20971520));
            if (blobUrl == null)
            {
                Logger.LogError($"File {file.Name} upload failed.");
                warninngMessage = "File Upload failed, Please try again!!";
            }
            else
            {
                Logger.LogInformation($"File {file.Name} uploaded.");
                warninngMessage = "File uploaded!";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"File {file.Name} upload failed.");
            warninngMessage = "File Upload failed, Please try again!!";
        }   

        await AddUploadAsync();
        
        fileLoading = false;
        
        Logger.LogInformation($"Leaving OnSubmit method with file: {file.Name}.");
        this.StateHasChanged();
    }
    
    private async Task AddUploadAsync()
    {
        Logger.LogInformation($"AddUploadAsync method with file: {file.Name}.");
        
        await using var context = await DbFactory.CreateDbContextAsync();

        var newUpload = new Uploads()
        {
            Email = Model.Email,
            FileName = file.Name,
            Uri = blobUrl
        };
        context.Uploads.Add(newUpload);
        var id = await context.SaveChangesAsync();
        
        Logger.LogInformation($"File uploaded, id: {id}.");
    }
}